"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const admin_bro_1 = __importStar(require("admin-bro"));
const editComponent = admin_bro_1.default.bundle('../components/edit');
const passwordsFeature = (options) => {
    var _a, _b;
    const passwordProperty = ((_a = options === null || options === void 0 ? void 0 : options.properties) === null || _a === void 0 ? void 0 : _a.password) || 'password';
    const encryptedPasswordProperty = ((_b = options === null || options === void 0 ? void 0 : options.properties) === null || _b === void 0 ? void 0 : _b.encryptedPassword) || 'encryptedPassword';
    const { hash } = options || {};
    if (!hash) {
        throw new Error('You have to pass "hash" option in "PasswordOptions" of "passwordsFeature"');
    }
    const encryptPassword = async (request) => {
        const { method } = request;
        const _a = request.payload || {}, _b = passwordProperty, newPassword = _a[_b], rest = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        if (method === 'post' && newPassword) {
            return Object.assign(Object.assign({}, request), { payload: Object.assign(Object.assign({}, rest), { [encryptedPasswordProperty]: await hash(newPassword) }) });
        }
        return request;
    };
    const movePasswordErrors = async (response) => {
        if (response.record
            && response.record.errors
            && response.record.errors[encryptedPasswordProperty]) {
            response.record.errors[passwordProperty] = response.record.errors[encryptedPasswordProperty];
        }
        return response;
    };
    return admin_bro_1.buildFeature({
        properties: {
            [passwordProperty]: {
                custom: {
                    password: passwordProperty,
                    encryptedPassword: encryptedPasswordProperty,
                },
                isVisible: { filter: false, show: false, edit: true, list: false },
                components: {
                    edit: editComponent,
                },
            },
        },
        actions: {
            edit: {
                before: [encryptPassword],
                after: [movePasswordErrors],
            },
            new: {
                before: [encryptPassword],
                after: [movePasswordErrors],
            },
        },
    });
};
exports.default = passwordsFeature;
